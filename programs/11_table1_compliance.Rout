
R version 4.2.3 (2023-03-15) -- "Shortstop Beagle"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Tabulate statistics and make graphs for the AEA data editor report
> # Harry Son
> # 2/18/2021
> 
> # Inputs
> #   - file.path(jiraanon,"jira.anon.RDS") 
> #   - file.path(temp,"jira.others.RDS)
> # Outputs
> 
> 
> ### Load libraries 
> ### Requirements: have library *here*
> source(here::here("global-libraries.R"),echo=TRUE)

> ppm.date <- "2023-11-01"

> options(repos = c(CRAN = paste0("https://packagemanager.posit.co/cran/__linux__/focal/", 
+     ppm.date)))

> global.libraries <- c("dplyr", "here", "tidyr", "tibble", 
+     "stringr", "readr", "splitstackshape", "digest", "remotes", 
+     "readxl", "write ..." ... [TRUNCATED] 

> pkgTest <- function(x) {
+     if (!require(x, character.only = TRUE)) {
+         install.packages(x, dep = TRUE)
+         if (!require(x, charact .... [TRUNCATED] 

> pkgTest.github <- function(libname, source, pkgname = libname) {
+     if (!require(libname, character.only = TRUE)) {
+         if (pkgname == "")  .... [TRUNCATED] 

> results <- sapply(as.list(global.libraries), pkgTest)
Loading required package: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: here
here() starts at /home/rstudio
Loading required package: tidyr
Loading required package: tibble
Loading required package: stringr
Loading required package: readr
Loading required package: splitstackshape
Loading required package: digest
Loading required package: remotes
Loading required package: readxl
Loading required package: writexl
Loading required package: ggplot2
Loading required package: ggthemes
Loading required package: janitor

Attaching package: ‘janitor’

The following objects are masked from ‘package:stats’:

    chisq.test, fisher.test

Loading required package: dataverse
Loading required package: xtable

> pkgTest.github("stargazer", "markwestcott34", "stargazer-booktabs")
Loading required package: stargazer

Please cite as: 

 Hlavac, Marek (2015). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2. http://CRAN.R-project.org/package=stargazer 

[1] "OK"
> source(here::here("programs","config.R"),echo=TRUE)

> process_anon <- TRUE

> download_anon <- TRUE

> report.year <- 2023

> firstday <- paste0(as.character(report.year - 1), 
+     "-12-01")

> lastday <- paste0(as.character(report.year), "-11-30")

> basepath <- here::here()

> setwd(basepath)

> jira.anon.partial <- file.path("data", "jira", "anon")

> jiraanon <- file.path(basepath, jira.anon.partial)

> manual <- file.path(basepath, "data", "manual")

> jira.raw <- file.path("data", "jira", "raw")

> icpsrbase <- file.path(basepath, "data", "icpsr")

> icpsr.utilization.date <- "2023-12-06"

> icpsr.utilization.file <- paste0("utilizationReport-", 
+     icpsr.utilization.date, ".csv")

> icpsr.custom.xlsx <- "AEA-2023-Jan-1-through-Nov-28-2023.xlsx"

> zenodobase <- file.path(basepath, "data", "zenodo")

> jira.anon.name <- file.path(jiraanon, "jira.anon.RDS")

> jira.anon.commit <- "c02c1a68b2bdc24704d1e51b5273df209ad31378"

> jira.anon.sha256 <- "6f76b58e101f88469698cfec98a834f160f25db6549d433f45520be21360d3d5"

> jira.anon.urlbase <- paste0("https://raw.githubusercontent.com/AEADataEditor/processing-jira-process-data/", 
+     jira.anon.commit)

> jira.anon.url <- file.path(jira.anon.urlbase, "data", 
+     "anon", "jira.anon.RDS")

> jira.members.url <- file.path(jira.anon.urlbase, "data", 
+     "replicationlab_members.txt")

> jira.members.name <- file.path(jiraanon, "replicationlab_members.txt")

> jira.noncompliance.name <- file.path(jira.raw, "jira-search-non-compliant.xlsx")

> jira.updates.name <- file.path(jira.raw, "jira-search-updates.xlsx")

> jira.nda.name <- file.path(jira.raw, "jira-search-nda.xlsx")

> jira.external.name <- file.path(jira.raw, "jira-search-external.xlsx")

> scholarone <- file.path(basepath, "data", "scholarone")

> scholarone.file <- "dataEditorReport_20221111-20231110.xlsx"

> scholarone.name <- file.path(scholarone, scholarone.file)

> scholarone.prev <- "dataEditorReport_20201128-20211127Revised.xlsx"

> scholarone.skip <- 33

> scholarone.skip2 <- 45

> scholarone.pskip <- 31

> images <- file.path(basepath, "images")

> tables <- file.path(basepath, "tables")

> programs <- file.path(basepath, "programs")

> temp <- file.path(basepath, "data", "temp")

> latexnums.Rda <- file.path(tables, "latexnums.Rda")

> latexnums.tex <- file.path(tables, "latexnums.tex")

> for (dir in list(images, tables, programs, temp)) {
+     if (file.exists(dir)) {
+     }
+     else {
+         dir.create(file.path(dir))
+     }
 .... [TRUNCATED] 

> set.seed(20201201)

> pkgTest("tibble")
[1] "OK"

> if (file.exists(latexnums.Rda)) {
+     print(paste0("File for export to LaTeX found: ", latexnums.Rda))
+ } else {
+     latexnums <- tibble(field  .... [TRUNCATED] 
[1] "File for export to LaTeX found: /home/rstudio/tables/latexnums.Rda"

> update_latexnums <- function(field, value) {
+     latexnums <- readRDS(latexnums.Rda)
+     if (any(latexnums$field == field)) {
+         message( .... [TRUNCATED] 

> .Last <- function() {
+     sessionInfo()
+ }
> 
> 
> library(stargazer)
> 
> # let's get the noncompliant 
> # JIRA extract: select Task, Noncompliant = Yes. Verify and cleanup any pending. Download Excel file.
> # Columns will depend on view. At a minimu, AEAREP number, Manuscript Number, Journal, openICPSR ID
> # .... Key	Summary	Manuscript Central identifier	Status	Journal	openICPSRDOI	openICPSR Project Number	Assignee
> # Summary and Assignee will be removed here. 
> # ============ THIS IS TEMPORARY AND SHOULD BE HANDLED IN PROCESSING =================
> # The xlsx files are treated as confidential.
> 
> flag.processing <- TRUE
> 
> if ( file.exists(jira.noncompliance.name) ) {
+   jira.noncompliance <- read_excel(jira.noncompliance.name,
+                               sheet = 2) 
+   message(paste0("File ",jira.noncompliance.name," read"))
+ } else {
+   message(paste0("Missing noncompliance file ",jira.noncompliance.name))
+   flag.processing <- FALSE
+ }
Missing noncompliance file data/jira/raw/jira-search-non-compliant.xlsx
> 
> # get the updates. Similar to above, but filter on MCStatus = Update.
> 
> if ( file.exists(jira.updates.name) ) {
+   jira.updates <- read_excel(jira.updates.name,
+                              sheet = 2) 
+   message(paste0("File ",jira.updates.name," read"))
+ } else {
+   message(paste0("Missing updates file ",jira.updates.name))
+   flag.processing <- FALSE
+ }
Missing updates file data/jira/raw/jira-search-updates.xlsx
> 
> 
> # get the ndas 
> 
> if ( file.exists(jira.nda.name) ) {
+   jira.nda <- read_excel(jira.nda.name,
+                              sheet = 2) 
+   message(paste0("File ",jira.nda.name," read"))
+ } else {
+   message(paste0("Missing nda file ",jira.nda.name))
+   flag.processing <- FALSE
+ }
Missing nda file data/jira/raw/jira-search-nda.xlsx
> 
> 
> # get the externals 
> 
> if ( file.exists(jira.external.name) ) {
+   jira.external <- read_excel(jira.external.name,
+                          sheet = 2) 
+   message(paste0("File ",jira.external.name," read"))
+ } else {
+   message(paste0("Missing external file ",jira.external.name))
+   flag.processing <- FALSE
+ }
Missing external file data/jira/raw/jira-search-external.xlsx
> 
> # Summarize various extra statuses
> 
> # For non-compliance and updates, we do not try to unduplicate by MC, since some are
> # pre-Data Editor, and do not have a MC Number.
> if (flag.processing) {
+   message("Confidential files present, continuing.")
+ 
+ jira.noncompliance %>% 
+   group_by(`Manuscript Central identifier`) %>%
+   summarize(n=n()) %>%
+   ungroup() %>%
+   # we ignore the n because it is just a trick to get distinct char vars
+   summarize(`Non-compliant`=n())  -> summary_compliance
+ 
+ 
+ update_latexnums("mcpubnoncompl",summary_compliance$`Non-compliant`)
+ 
+ 
+ # Summarize updates - same thing
+ 
+ jira.updates %>% 
+   group_by(`Manuscript Central identifier`) %>%
+   summarize(n=n()) %>%
+   ungroup() %>%
+   summarize(`Updates`=n()) %>%
+   ungroup()  -> summary_updates
+ 
+ 
+ update_latexnums("mcpubupdates",summary_updates$`Updates`)
+ 
+ 
+ # removed "n_compliance_manuscript.tex"
+ 
+ # create table by update type
+ 
+ jira.updates %>% 
+   separate_longer_delim(`Update type`,delim=";") %>%
+   group_by(`Update type`,`Manuscript Central identifier`) %>%
+   summarize(n=n()) %>%
+   ungroup() %>%
+   group_by(`Update type`) %>%
+   # here we actually allow for multiple updates per MC
+   summarize(`Manuscripts`=sum(n)) %>%
+   rename(Origin = `Update type`) %>%
+   ungroup() -> update_types
+ 
+ 
+ 
+ # create table by journal
+ update_types %>%
+   mutate(Manuscripts =replace_na(as.character(Manuscripts),"")) %>%
+   stargazer(style = "aer",
+             summary = FALSE,
+             out = file.path(tables,"n_updates_manuscript.tex"),
+             out.header = FALSE,
+             float = FALSE,
+             rownames = FALSE
+ 
+   )
+ 
+ # now for information on NDAs
+ 
+ 
+ jira.nda %>% 
+   mutate(mc_number = sub('\\..*', '',`Manuscript Central identifier`)) -> jira.nda.clean
+ 
+ # get at the total count 
+ jira.nda.clean %>%
+   group_by(`Agreement signed`,mc_number) %>%
+   summarize(n=n()) %>%
+   ungroup() %>%
+   group_by(`Agreement signed`) %>%
+   # here we do not allow for multiple nda per MC
+   summarize(`Manuscripts`=n()) %>%
+   mutate(Type = case_match(`Agreement signed`,
+                            "DUA" ~ "Data Use Agreement",
+                            "NDA" ~ "NDA (formal)",
+                            "NDA;Implicit" ~ "NDA (informal)")) %>%
+   ungroup() -> nda_types
+ 
+ 
+ update_latexnums("mcpubnda",sum(nda_types$Manuscripts))
+ 
+ # create table by type
+ nda_types %>%
+   mutate(Manuscripts =replace_na(as.character(Manuscripts),"")) %>%
+   select(Type,Manuscripts) %>%
+   stargazer(style = "aer",
+             summary = FALSE,
+             out = file.path(tables,"n_ndas_manuscript.tex"),
+             out.header = FALSE,
+             float = FALSE,
+             rownames = FALSE
+   )
+ 
+ # Information by external
+ 
+ jira.external %>% 
+   mutate(mc_number = sub('\\..*', '',`Manuscript Central identifier`)) -> jira.external.clean
+ 
+ # get at the total count 
+ jira.external.clean %>%
+   group_by(`External party name`,mc_number) %>%
+   summarize(n=n()) %>%
+   ungroup() %>%
+   group_by(`External party name`) %>%
+   # here we do not allow for multiple externals per MC
+   summarize(`Manuscripts`=n()) -> jira.external.details
+ 
+ jira.external.details %>%
+   mutate(`External party name` = if_else(grepl("tudent",`External party name`,fixed=TRUE),
+                                          "Graduate Student",
+                                          `External party name`)) %>%
+   group_by(`External party name`) %>%
+   summarize(`Manuscripts` = sum(Manuscripts)) -> external_types
+ 
+ update_latexnums("mcpubexternal",sum(external_types$Manuscripts))
+ 
+ # create table by type
+ external_types %>%
+   mutate(Manuscripts =replace_na(as.character(Manuscripts),"")) %>%
+   stargazer(style = "aer",
+             summary = FALSE,
+             out = file.path(tables,"n_externals_manuscript.tex"),
+             out.header = FALSE,
+             float = FALSE,
+             rownames = FALSE
+   )
+ 
+ } else {
+   message("Confidential files missing, skipping.")
+ }
Confidential files missing, skipping.
> 
> proc.time()
   user  system elapsed 
  1.468   0.154   1.714 
